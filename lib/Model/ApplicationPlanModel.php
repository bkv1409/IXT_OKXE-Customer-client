<?php
/**
 * ApplicationPlanModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IXT-OKXE-Customer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: local
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApplicationPlanModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationPlanModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicationPlanModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'underwriting_rules' => 'object[]',
'underwriting_result' => 'string',
'id' => 'int',
'plan_id' => 'int',
'constraint_id' => 'string',
'constraint_name' => 'string',
'adjustment_amount' => 'float',
'adjustment_rate' => 'float',
'payment_mode' => 'object',
'insured_subjects' => '\Swagger\Client\Model\InsuredSubjectModel[]',
'standard_premium' => 'float',
'adjusted_premium' => 'float',
'customized_attributes' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'underwriting_rules' => null,
'underwriting_result' => null,
'id' => null,
'plan_id' => null,
'constraint_id' => null,
'constraint_name' => null,
'adjustment_amount' => null,
'adjustment_rate' => null,
'payment_mode' => null,
'insured_subjects' => null,
'standard_premium' => null,
'adjusted_premium' => null,
'customized_attributes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'underwriting_rules' => 'underwriting_rules',
'underwriting_result' => 'underwriting_result',
'id' => 'id',
'plan_id' => 'plan_id',
'constraint_id' => 'constraint_id',
'constraint_name' => 'constraint_name',
'adjustment_amount' => 'adjustment_amount',
'adjustment_rate' => 'adjustment_rate',
'payment_mode' => 'payment_mode',
'insured_subjects' => 'insured_subjects',
'standard_premium' => 'standard_premium',
'adjusted_premium' => 'adjusted_premium',
'customized_attributes' => 'customized_attributes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'underwriting_rules' => 'setUnderwritingRules',
'underwriting_result' => 'setUnderwritingResult',
'id' => 'setId',
'plan_id' => 'setPlanId',
'constraint_id' => 'setConstraintId',
'constraint_name' => 'setConstraintName',
'adjustment_amount' => 'setAdjustmentAmount',
'adjustment_rate' => 'setAdjustmentRate',
'payment_mode' => 'setPaymentMode',
'insured_subjects' => 'setInsuredSubjects',
'standard_premium' => 'setStandardPremium',
'adjusted_premium' => 'setAdjustedPremium',
'customized_attributes' => 'setCustomizedAttributes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'underwriting_rules' => 'getUnderwritingRules',
'underwriting_result' => 'getUnderwritingResult',
'id' => 'getId',
'plan_id' => 'getPlanId',
'constraint_id' => 'getConstraintId',
'constraint_name' => 'getConstraintName',
'adjustment_amount' => 'getAdjustmentAmount',
'adjustment_rate' => 'getAdjustmentRate',
'payment_mode' => 'getPaymentMode',
'insured_subjects' => 'getInsuredSubjects',
'standard_premium' => 'getStandardPremium',
'adjusted_premium' => 'getAdjustedPremium',
'customized_attributes' => 'getCustomizedAttributes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['underwriting_rules'] = isset($data['underwriting_rules']) ? $data['underwriting_rules'] : null;
        $this->container['underwriting_result'] = isset($data['underwriting_result']) ? $data['underwriting_result'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['plan_id'] = isset($data['plan_id']) ? $data['plan_id'] : null;
        $this->container['constraint_id'] = isset($data['constraint_id']) ? $data['constraint_id'] : null;
        $this->container['constraint_name'] = isset($data['constraint_name']) ? $data['constraint_name'] : null;
        $this->container['adjustment_amount'] = isset($data['adjustment_amount']) ? $data['adjustment_amount'] : null;
        $this->container['adjustment_rate'] = isset($data['adjustment_rate']) ? $data['adjustment_rate'] : null;
        $this->container['payment_mode'] = isset($data['payment_mode']) ? $data['payment_mode'] : null;
        $this->container['insured_subjects'] = isset($data['insured_subjects']) ? $data['insured_subjects'] : null;
        $this->container['standard_premium'] = isset($data['standard_premium']) ? $data['standard_premium'] : null;
        $this->container['adjusted_premium'] = isset($data['adjusted_premium']) ? $data['adjusted_premium'] : null;
        $this->container['customized_attributes'] = isset($data['customized_attributes']) ? $data['customized_attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['underwriting_rules'] === null) {
            $invalidProperties[] = "'underwriting_rules' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['plan_id'] === null) {
            $invalidProperties[] = "'plan_id' can't be null";
        }
        if ($this->container['constraint_id'] === null) {
            $invalidProperties[] = "'constraint_id' can't be null";
        }
        if ($this->container['constraint_name'] === null) {
            $invalidProperties[] = "'constraint_name' can't be null";
        }
        if ($this->container['adjustment_amount'] === null) {
            $invalidProperties[] = "'adjustment_amount' can't be null";
        }
        if ($this->container['adjustment_rate'] === null) {
            $invalidProperties[] = "'adjustment_rate' can't be null";
        }
        if ($this->container['payment_mode'] === null) {
            $invalidProperties[] = "'payment_mode' can't be null";
        }
        if ($this->container['insured_subjects'] === null) {
            $invalidProperties[] = "'insured_subjects' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets underwriting_rules
     *
     * @return object[]
     */
    public function getUnderwritingRules()
    {
        return $this->container['underwriting_rules'];
    }

    /**
     * Sets underwriting_rules
     *
     * @param object[] $underwriting_rules underwriting_rules
     *
     * @return $this
     */
    public function setUnderwritingRules($underwriting_rules)
    {
        $this->container['underwriting_rules'] = $underwriting_rules;

        return $this;
    }

    /**
     * Gets underwriting_result
     *
     * @return string
     */
    public function getUnderwritingResult()
    {
        return $this->container['underwriting_result'];
    }

    /**
     * Sets underwriting_result
     *
     * @param string $underwriting_result underwriting_result
     *
     * @return $this
     */
    public function setUnderwritingResult($underwriting_result)
    {
        $this->container['underwriting_result'] = $underwriting_result;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets plan_id
     *
     * @return int
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     *
     * @param int $plan_id plan_id
     *
     * @return $this
     */
    public function setPlanId($plan_id)
    {
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets constraint_id
     *
     * @return string
     */
    public function getConstraintId()
    {
        return $this->container['constraint_id'];
    }

    /**
     * Sets constraint_id
     *
     * @param string $constraint_id constraint_id
     *
     * @return $this
     */
    public function setConstraintId($constraint_id)
    {
        $this->container['constraint_id'] = $constraint_id;

        return $this;
    }

    /**
     * Gets constraint_name
     *
     * @return string
     */
    public function getConstraintName()
    {
        return $this->container['constraint_name'];
    }

    /**
     * Sets constraint_name
     *
     * @param string $constraint_name constraint_name
     *
     * @return $this
     */
    public function setConstraintName($constraint_name)
    {
        $this->container['constraint_name'] = $constraint_name;

        return $this;
    }

    /**
     * Gets adjustment_amount
     *
     * @return float
     */
    public function getAdjustmentAmount()
    {
        return $this->container['adjustment_amount'];
    }

    /**
     * Sets adjustment_amount
     *
     * @param float $adjustment_amount adjustment_amount
     *
     * @return $this
     */
    public function setAdjustmentAmount($adjustment_amount)
    {
        $this->container['adjustment_amount'] = $adjustment_amount;

        return $this;
    }

    /**
     * Gets adjustment_rate
     *
     * @return float
     */
    public function getAdjustmentRate()
    {
        return $this->container['adjustment_rate'];
    }

    /**
     * Sets adjustment_rate
     *
     * @param float $adjustment_rate adjustment_rate
     *
     * @return $this
     */
    public function setAdjustmentRate($adjustment_rate)
    {
        $this->container['adjustment_rate'] = $adjustment_rate;

        return $this;
    }

    /**
     * Gets payment_mode
     *
     * @return object
     */
    public function getPaymentMode()
    {
        return $this->container['payment_mode'];
    }

    /**
     * Sets payment_mode
     *
     * @param object $payment_mode payment_mode
     *
     * @return $this
     */
    public function setPaymentMode($payment_mode)
    {
        $this->container['payment_mode'] = $payment_mode;

        return $this;
    }

    /**
     * Gets insured_subjects
     *
     * @return \Swagger\Client\Model\InsuredSubjectModel[]
     */
    public function getInsuredSubjects()
    {
        return $this->container['insured_subjects'];
    }

    /**
     * Sets insured_subjects
     *
     * @param \Swagger\Client\Model\InsuredSubjectModel[] $insured_subjects insured_subjects
     *
     * @return $this
     */
    public function setInsuredSubjects($insured_subjects)
    {
        $this->container['insured_subjects'] = $insured_subjects;

        return $this;
    }

    /**
     * Gets standard_premium
     *
     * @return float
     */
    public function getStandardPremium()
    {
        return $this->container['standard_premium'];
    }

    /**
     * Sets standard_premium
     *
     * @param float $standard_premium standard_premium
     *
     * @return $this
     */
    public function setStandardPremium($standard_premium)
    {
        $this->container['standard_premium'] = $standard_premium;

        return $this;
    }

    /**
     * Gets adjusted_premium
     *
     * @return float
     */
    public function getAdjustedPremium()
    {
        return $this->container['adjusted_premium'];
    }

    /**
     * Sets adjusted_premium
     *
     * @param float $adjusted_premium adjusted_premium
     *
     * @return $this
     */
    public function setAdjustedPremium($adjusted_premium)
    {
        $this->container['adjusted_premium'] = $adjusted_premium;

        return $this;
    }

    /**
     * Gets customized_attributes
     *
     * @return object
     */
    public function getCustomizedAttributes()
    {
        return $this->container['customized_attributes'];
    }

    /**
     * Sets customized_attributes
     *
     * @param object $customized_attributes customized_attributes
     *
     * @return $this
     */
    public function setCustomizedAttributes($customized_attributes)
    {
        $this->container['customized_attributes'] = $customized_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
