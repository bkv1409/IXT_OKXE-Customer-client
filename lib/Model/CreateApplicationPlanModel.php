<?php
/**
 * CreateApplicationPlanModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IXT-OKXE-Customer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: local
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateApplicationPlanModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateApplicationPlanModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateApplicationPlanModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'plan_id' => 'int',
'payment_mode_id' => 'int',
'customized_attributes' => 'object',
'insured_subjects' => '\Swagger\Client\Model\CreateInsuredSubjectModel[]',
'constraint_id' => 'int',
'effected_at' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'plan_id' => null,
'payment_mode_id' => null,
'customized_attributes' => null,
'insured_subjects' => null,
'constraint_id' => null,
'effected_at' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plan_id' => 'plan_id',
'payment_mode_id' => 'payment_mode_id',
'customized_attributes' => 'customized_attributes',
'insured_subjects' => 'insured_subjects',
'constraint_id' => 'constraint_id',
'effected_at' => 'effected_at'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plan_id' => 'setPlanId',
'payment_mode_id' => 'setPaymentModeId',
'customized_attributes' => 'setCustomizedAttributes',
'insured_subjects' => 'setInsuredSubjects',
'constraint_id' => 'setConstraintId',
'effected_at' => 'setEffectedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plan_id' => 'getPlanId',
'payment_mode_id' => 'getPaymentModeId',
'customized_attributes' => 'getCustomizedAttributes',
'insured_subjects' => 'getInsuredSubjects',
'constraint_id' => 'getConstraintId',
'effected_at' => 'getEffectedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plan_id'] = isset($data['plan_id']) ? $data['plan_id'] : null;
        $this->container['payment_mode_id'] = isset($data['payment_mode_id']) ? $data['payment_mode_id'] : null;
        $this->container['customized_attributes'] = isset($data['customized_attributes']) ? $data['customized_attributes'] : null;
        $this->container['insured_subjects'] = isset($data['insured_subjects']) ? $data['insured_subjects'] : null;
        $this->container['constraint_id'] = isset($data['constraint_id']) ? $data['constraint_id'] : null;
        $this->container['effected_at'] = isset($data['effected_at']) ? $data['effected_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['plan_id'] === null) {
            $invalidProperties[] = "'plan_id' can't be null";
        }
        if ($this->container['payment_mode_id'] === null) {
            $invalidProperties[] = "'payment_mode_id' can't be null";
        }
        if ($this->container['customized_attributes'] === null) {
            $invalidProperties[] = "'customized_attributes' can't be null";
        }
        if ($this->container['insured_subjects'] === null) {
            $invalidProperties[] = "'insured_subjects' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plan_id
     *
     * @return int
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     *
     * @param int $plan_id plan_id
     *
     * @return $this
     */
    public function setPlanId($plan_id)
    {
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets payment_mode_id
     *
     * @return int
     */
    public function getPaymentModeId()
    {
        return $this->container['payment_mode_id'];
    }

    /**
     * Sets payment_mode_id
     *
     * @param int $payment_mode_id payment_mode_id
     *
     * @return $this
     */
    public function setPaymentModeId($payment_mode_id)
    {
        $this->container['payment_mode_id'] = $payment_mode_id;

        return $this;
    }

    /**
     * Gets customized_attributes
     *
     * @return object
     */
    public function getCustomizedAttributes()
    {
        return $this->container['customized_attributes'];
    }

    /**
     * Sets customized_attributes
     *
     * @param object $customized_attributes customized_attributes
     *
     * @return $this
     */
    public function setCustomizedAttributes($customized_attributes)
    {
        $this->container['customized_attributes'] = $customized_attributes;

        return $this;
    }

    /**
     * Gets insured_subjects
     *
     * @return \Swagger\Client\Model\CreateInsuredSubjectModel[]
     */
    public function getInsuredSubjects()
    {
        return $this->container['insured_subjects'];
    }

    /**
     * Sets insured_subjects
     *
     * @param \Swagger\Client\Model\CreateInsuredSubjectModel[] $insured_subjects insured_subjects
     *
     * @return $this
     */
    public function setInsuredSubjects($insured_subjects)
    {
        $this->container['insured_subjects'] = $insured_subjects;

        return $this;
    }

    /**
     * Gets constraint_id
     *
     * @return int
     */
    public function getConstraintId()
    {
        return $this->container['constraint_id'];
    }

    /**
     * Sets constraint_id
     *
     * @param int $constraint_id constraint_id
     *
     * @return $this
     */
    public function setConstraintId($constraint_id)
    {
        $this->container['constraint_id'] = $constraint_id;

        return $this;
    }

    /**
     * Gets effected_at
     *
     * @return \DateTime
     */
    public function getEffectedAt()
    {
        return $this->container['effected_at'];
    }

    /**
     * Sets effected_at
     *
     * @param \DateTime $effected_at effected_at
     *
     * @return $this
     */
    public function setEffectedAt($effected_at)
    {
        $this->container['effected_at'] = $effected_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
