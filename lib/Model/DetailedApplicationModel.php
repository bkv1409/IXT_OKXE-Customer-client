<?php
/**
 * DetailedApplicationModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IXT-OKXE-Customer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: local
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DetailedApplicationModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DetailedApplicationModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DetailedApplicationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'underwriting_rules' => 'object[]',
'underwriting_result' => 'string',
'id' => 'int',
'quotation_id' => 'int',
'product_id' => 'int',
'member_id' => 'int',
'constraint_id' => 'string',
'constraint_name' => 'string',
'application_type' => '\Swagger\Client\Model\IXTApplicationTypeEnum',
'currency' => 'string',
'state' => 'string',
'plans' => '\Swagger\Client\Model\ApplicationPlanModel[]',
'applicant' => '\Swagger\Client\Model\ApplicantModel',
'client_id' => 'string',
'client_data' => 'object',
'number' => 'string',
'application_number' => 'string',
'tags' => 'string[]',
'customized_attributes' => 'object',
'final_underwriting_result' => 'string',
'underwriter_underwriting_result' => 'string',
'effected_at' => '\DateTime',
'purchased_at' => '\DateTime',
'payment_period' => 'object',
'beneficiary_sequences' => '\Swagger\Client\Model\BeneficiaryModel[][]',
'policyholders' => '\Swagger\Client\Model\PolicyHolderModel[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'underwriting_rules' => null,
'underwriting_result' => null,
'id' => null,
'quotation_id' => null,
'product_id' => null,
'member_id' => null,
'constraint_id' => null,
'constraint_name' => null,
'application_type' => null,
'currency' => null,
'state' => null,
'plans' => null,
'applicant' => null,
'client_id' => null,
'client_data' => null,
'number' => null,
'application_number' => null,
'tags' => null,
'customized_attributes' => null,
'final_underwriting_result' => null,
'underwriter_underwriting_result' => null,
'effected_at' => 'date-time',
'purchased_at' => 'date-time',
'payment_period' => null,
'beneficiary_sequences' => null,
'policyholders' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'underwriting_rules' => 'underwriting_rules',
'underwriting_result' => 'underwriting_result',
'id' => 'id',
'quotation_id' => 'quotation_id',
'product_id' => 'product_id',
'member_id' => 'member_id',
'constraint_id' => 'constraint_id',
'constraint_name' => 'constraint_name',
'application_type' => 'application_type',
'currency' => 'currency',
'state' => 'state',
'plans' => 'plans',
'applicant' => 'applicant',
'client_id' => 'client_id',
'client_data' => 'client_data',
'number' => 'number',
'application_number' => 'application_number',
'tags' => 'tags',
'customized_attributes' => 'customized_attributes',
'final_underwriting_result' => 'final_underwriting_result',
'underwriter_underwriting_result' => 'underwriter_underwriting_result',
'effected_at' => 'effected_at',
'purchased_at' => 'purchased_at',
'payment_period' => 'payment_period',
'beneficiary_sequences' => 'beneficiary_sequences',
'policyholders' => 'policyholders'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'underwriting_rules' => 'setUnderwritingRules',
'underwriting_result' => 'setUnderwritingResult',
'id' => 'setId',
'quotation_id' => 'setQuotationId',
'product_id' => 'setProductId',
'member_id' => 'setMemberId',
'constraint_id' => 'setConstraintId',
'constraint_name' => 'setConstraintName',
'application_type' => 'setApplicationType',
'currency' => 'setCurrency',
'state' => 'setState',
'plans' => 'setPlans',
'applicant' => 'setApplicant',
'client_id' => 'setClientId',
'client_data' => 'setClientData',
'number' => 'setNumber',
'application_number' => 'setApplicationNumber',
'tags' => 'setTags',
'customized_attributes' => 'setCustomizedAttributes',
'final_underwriting_result' => 'setFinalUnderwritingResult',
'underwriter_underwriting_result' => 'setUnderwriterUnderwritingResult',
'effected_at' => 'setEffectedAt',
'purchased_at' => 'setPurchasedAt',
'payment_period' => 'setPaymentPeriod',
'beneficiary_sequences' => 'setBeneficiarySequences',
'policyholders' => 'setPolicyholders'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'underwriting_rules' => 'getUnderwritingRules',
'underwriting_result' => 'getUnderwritingResult',
'id' => 'getId',
'quotation_id' => 'getQuotationId',
'product_id' => 'getProductId',
'member_id' => 'getMemberId',
'constraint_id' => 'getConstraintId',
'constraint_name' => 'getConstraintName',
'application_type' => 'getApplicationType',
'currency' => 'getCurrency',
'state' => 'getState',
'plans' => 'getPlans',
'applicant' => 'getApplicant',
'client_id' => 'getClientId',
'client_data' => 'getClientData',
'number' => 'getNumber',
'application_number' => 'getApplicationNumber',
'tags' => 'getTags',
'customized_attributes' => 'getCustomizedAttributes',
'final_underwriting_result' => 'getFinalUnderwritingResult',
'underwriter_underwriting_result' => 'getUnderwriterUnderwritingResult',
'effected_at' => 'getEffectedAt',
'purchased_at' => 'getPurchasedAt',
'payment_period' => 'getPaymentPeriod',
'beneficiary_sequences' => 'getBeneficiarySequences',
'policyholders' => 'getPolicyholders'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['underwriting_rules'] = isset($data['underwriting_rules']) ? $data['underwriting_rules'] : null;
        $this->container['underwriting_result'] = isset($data['underwriting_result']) ? $data['underwriting_result'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['quotation_id'] = isset($data['quotation_id']) ? $data['quotation_id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['member_id'] = isset($data['member_id']) ? $data['member_id'] : null;
        $this->container['constraint_id'] = isset($data['constraint_id']) ? $data['constraint_id'] : null;
        $this->container['constraint_name'] = isset($data['constraint_name']) ? $data['constraint_name'] : null;
        $this->container['application_type'] = isset($data['application_type']) ? $data['application_type'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['plans'] = isset($data['plans']) ? $data['plans'] : null;
        $this->container['applicant'] = isset($data['applicant']) ? $data['applicant'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['client_data'] = isset($data['client_data']) ? $data['client_data'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['application_number'] = isset($data['application_number']) ? $data['application_number'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['customized_attributes'] = isset($data['customized_attributes']) ? $data['customized_attributes'] : null;
        $this->container['final_underwriting_result'] = isset($data['final_underwriting_result']) ? $data['final_underwriting_result'] : null;
        $this->container['underwriter_underwriting_result'] = isset($data['underwriter_underwriting_result']) ? $data['underwriter_underwriting_result'] : null;
        $this->container['effected_at'] = isset($data['effected_at']) ? $data['effected_at'] : null;
        $this->container['purchased_at'] = isset($data['purchased_at']) ? $data['purchased_at'] : null;
        $this->container['payment_period'] = isset($data['payment_period']) ? $data['payment_period'] : null;
        $this->container['beneficiary_sequences'] = isset($data['beneficiary_sequences']) ? $data['beneficiary_sequences'] : null;
        $this->container['policyholders'] = isset($data['policyholders']) ? $data['policyholders'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['underwriting_rules'] === null) {
            $invalidProperties[] = "'underwriting_rules' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['quotation_id'] === null) {
            $invalidProperties[] = "'quotation_id' can't be null";
        }
        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['member_id'] === null) {
            $invalidProperties[] = "'member_id' can't be null";
        }
        if ($this->container['constraint_id'] === null) {
            $invalidProperties[] = "'constraint_id' can't be null";
        }
        if ($this->container['constraint_name'] === null) {
            $invalidProperties[] = "'constraint_name' can't be null";
        }
        if ($this->container['application_type'] === null) {
            $invalidProperties[] = "'application_type' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['plans'] === null) {
            $invalidProperties[] = "'plans' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets underwriting_rules
     *
     * @return object[]
     */
    public function getUnderwritingRules()
    {
        return $this->container['underwriting_rules'];
    }

    /**
     * Sets underwriting_rules
     *
     * @param object[] $underwriting_rules underwriting_rules
     *
     * @return $this
     */
    public function setUnderwritingRules($underwriting_rules)
    {
        $this->container['underwriting_rules'] = $underwriting_rules;

        return $this;
    }

    /**
     * Gets underwriting_result
     *
     * @return string
     */
    public function getUnderwritingResult()
    {
        return $this->container['underwriting_result'];
    }

    /**
     * Sets underwriting_result
     *
     * @param string $underwriting_result underwriting_result
     *
     * @return $this
     */
    public function setUnderwritingResult($underwriting_result)
    {
        $this->container['underwriting_result'] = $underwriting_result;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets quotation_id
     *
     * @return int
     */
    public function getQuotationId()
    {
        return $this->container['quotation_id'];
    }

    /**
     * Sets quotation_id
     *
     * @param int $quotation_id quotation_id
     *
     * @return $this
     */
    public function setQuotationId($quotation_id)
    {
        $this->container['quotation_id'] = $quotation_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return int
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param int $member_id member_id
     *
     * @return $this
     */
    public function setMemberId($member_id)
    {
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets constraint_id
     *
     * @return string
     */
    public function getConstraintId()
    {
        return $this->container['constraint_id'];
    }

    /**
     * Sets constraint_id
     *
     * @param string $constraint_id constraint_id
     *
     * @return $this
     */
    public function setConstraintId($constraint_id)
    {
        $this->container['constraint_id'] = $constraint_id;

        return $this;
    }

    /**
     * Gets constraint_name
     *
     * @return string
     */
    public function getConstraintName()
    {
        return $this->container['constraint_name'];
    }

    /**
     * Sets constraint_name
     *
     * @param string $constraint_name constraint_name
     *
     * @return $this
     */
    public function setConstraintName($constraint_name)
    {
        $this->container['constraint_name'] = $constraint_name;

        return $this;
    }

    /**
     * Gets application_type
     *
     * @return \Swagger\Client\Model\IXTApplicationTypeEnum
     */
    public function getApplicationType()
    {
        return $this->container['application_type'];
    }

    /**
     * Sets application_type
     *
     * @param \Swagger\Client\Model\IXTApplicationTypeEnum $application_type application_type
     *
     * @return $this
     */
    public function setApplicationType($application_type)
    {
        $this->container['application_type'] = $application_type;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets plans
     *
     * @return \Swagger\Client\Model\ApplicationPlanModel[]
     */
    public function getPlans()
    {
        return $this->container['plans'];
    }

    /**
     * Sets plans
     *
     * @param \Swagger\Client\Model\ApplicationPlanModel[] $plans plans
     *
     * @return $this
     */
    public function setPlans($plans)
    {
        $this->container['plans'] = $plans;

        return $this;
    }

    /**
     * Gets applicant
     *
     * @return \Swagger\Client\Model\ApplicantModel
     */
    public function getApplicant()
    {
        return $this->container['applicant'];
    }

    /**
     * Sets applicant
     *
     * @param \Swagger\Client\Model\ApplicantModel $applicant applicant
     *
     * @return $this
     */
    public function setApplicant($applicant)
    {
        $this->container['applicant'] = $applicant;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_data
     *
     * @return object
     */
    public function getClientData()
    {
        return $this->container['client_data'];
    }

    /**
     * Sets client_data
     *
     * @param object $client_data client_data
     *
     * @return $this
     */
    public function setClientData($client_data)
    {
        $this->container['client_data'] = $client_data;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets application_number
     *
     * @return string
     */
    public function getApplicationNumber()
    {
        return $this->container['application_number'];
    }

    /**
     * Sets application_number
     *
     * @param string $application_number application_number
     *
     * @return $this
     */
    public function setApplicationNumber($application_number)
    {
        $this->container['application_number'] = $application_number;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets customized_attributes
     *
     * @return object
     */
    public function getCustomizedAttributes()
    {
        return $this->container['customized_attributes'];
    }

    /**
     * Sets customized_attributes
     *
     * @param object $customized_attributes customized_attributes
     *
     * @return $this
     */
    public function setCustomizedAttributes($customized_attributes)
    {
        $this->container['customized_attributes'] = $customized_attributes;

        return $this;
    }

    /**
     * Gets final_underwriting_result
     *
     * @return string
     */
    public function getFinalUnderwritingResult()
    {
        return $this->container['final_underwriting_result'];
    }

    /**
     * Sets final_underwriting_result
     *
     * @param string $final_underwriting_result final_underwriting_result
     *
     * @return $this
     */
    public function setFinalUnderwritingResult($final_underwriting_result)
    {
        $this->container['final_underwriting_result'] = $final_underwriting_result;

        return $this;
    }

    /**
     * Gets underwriter_underwriting_result
     *
     * @return string
     */
    public function getUnderwriterUnderwritingResult()
    {
        return $this->container['underwriter_underwriting_result'];
    }

    /**
     * Sets underwriter_underwriting_result
     *
     * @param string $underwriter_underwriting_result underwriter_underwriting_result
     *
     * @return $this
     */
    public function setUnderwriterUnderwritingResult($underwriter_underwriting_result)
    {
        $this->container['underwriter_underwriting_result'] = $underwriter_underwriting_result;

        return $this;
    }

    /**
     * Gets effected_at
     *
     * @return \DateTime
     */
    public function getEffectedAt()
    {
        return $this->container['effected_at'];
    }

    /**
     * Sets effected_at
     *
     * @param \DateTime $effected_at effected_at
     *
     * @return $this
     */
    public function setEffectedAt($effected_at)
    {
        $this->container['effected_at'] = $effected_at;

        return $this;
    }

    /**
     * Gets purchased_at
     *
     * @return \DateTime
     */
    public function getPurchasedAt()
    {
        return $this->container['purchased_at'];
    }

    /**
     * Sets purchased_at
     *
     * @param \DateTime $purchased_at purchased_at
     *
     * @return $this
     */
    public function setPurchasedAt($purchased_at)
    {
        $this->container['purchased_at'] = $purchased_at;

        return $this;
    }

    /**
     * Gets payment_period
     *
     * @return object
     */
    public function getPaymentPeriod()
    {
        return $this->container['payment_period'];
    }

    /**
     * Sets payment_period
     *
     * @param object $payment_period payment_period
     *
     * @return $this
     */
    public function setPaymentPeriod($payment_period)
    {
        $this->container['payment_period'] = $payment_period;

        return $this;
    }

    /**
     * Gets beneficiary_sequences
     *
     * @return \Swagger\Client\Model\BeneficiaryModel[][]
     */
    public function getBeneficiarySequences()
    {
        return $this->container['beneficiary_sequences'];
    }

    /**
     * Sets beneficiary_sequences
     *
     * @param \Swagger\Client\Model\BeneficiaryModel[][] $beneficiary_sequences beneficiary_sequences
     *
     * @return $this
     */
    public function setBeneficiarySequences($beneficiary_sequences)
    {
        $this->container['beneficiary_sequences'] = $beneficiary_sequences;

        return $this;
    }

    /**
     * Gets policyholders
     *
     * @return \Swagger\Client\Model\PolicyHolderModel[]
     */
    public function getPolicyholders()
    {
        return $this->container['policyholders'];
    }

    /**
     * Sets policyholders
     *
     * @param \Swagger\Client\Model\PolicyHolderModel[] $policyholders policyholders
     *
     * @return $this
     */
    public function setPolicyholders($policyholders)
    {
        $this->container['policyholders'] = $policyholders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
