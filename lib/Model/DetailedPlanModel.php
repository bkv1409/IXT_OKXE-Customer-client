<?php
/**
 * DetailedPlanModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IXT-OKXE-Customer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: local
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DetailedPlanModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DetailedPlanModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DetailedPlanModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'code' => 'string',
'name' => 'string',
'description' => 'string',
'is_core' => 'bool',
'policy_period' => 'AnyOfDetailedPlanModelPolicyPeriod',
'payment_modes' => '\Swagger\Client\Model\PlanPaymentModeModel[]',
'currencies' => 'string[]',
'benefits' => '\Swagger\Client\Model\AnyOfDetailedPlanModelBenefitsItems[]',
'insured_subject_constraints' => '\Swagger\Client\Model\PartialConstraintModel[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'code' => null,
'name' => null,
'description' => null,
'is_core' => null,
'policy_period' => null,
'payment_modes' => null,
'currencies' => null,
'benefits' => null,
'insured_subject_constraints' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'code' => 'code',
'name' => 'name',
'description' => 'description',
'is_core' => 'is_core',
'policy_period' => 'policy_period',
'payment_modes' => 'payment_modes',
'currencies' => 'currencies',
'benefits' => 'benefits',
'insured_subject_constraints' => 'insured_subject_constraints'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'code' => 'setCode',
'name' => 'setName',
'description' => 'setDescription',
'is_core' => 'setIsCore',
'policy_period' => 'setPolicyPeriod',
'payment_modes' => 'setPaymentModes',
'currencies' => 'setCurrencies',
'benefits' => 'setBenefits',
'insured_subject_constraints' => 'setInsuredSubjectConstraints'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'code' => 'getCode',
'name' => 'getName',
'description' => 'getDescription',
'is_core' => 'getIsCore',
'policy_period' => 'getPolicyPeriod',
'payment_modes' => 'getPaymentModes',
'currencies' => 'getCurrencies',
'benefits' => 'getBenefits',
'insured_subject_constraints' => 'getInsuredSubjectConstraints'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_core'] = isset($data['is_core']) ? $data['is_core'] : null;
        $this->container['policy_period'] = isset($data['policy_period']) ? $data['policy_period'] : null;
        $this->container['payment_modes'] = isset($data['payment_modes']) ? $data['payment_modes'] : null;
        $this->container['currencies'] = isset($data['currencies']) ? $data['currencies'] : null;
        $this->container['benefits'] = isset($data['benefits']) ? $data['benefits'] : null;
        $this->container['insured_subject_constraints'] = isset($data['insured_subject_constraints']) ? $data['insured_subject_constraints'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['is_core'] === null) {
            $invalidProperties[] = "'is_core' can't be null";
        }
        if ($this->container['policy_period'] === null) {
            $invalidProperties[] = "'policy_period' can't be null";
        }
        if ($this->container['payment_modes'] === null) {
            $invalidProperties[] = "'payment_modes' can't be null";
        }
        if ($this->container['benefits'] === null) {
            $invalidProperties[] = "'benefits' can't be null";
        }
        if ($this->container['insured_subject_constraints'] === null) {
            $invalidProperties[] = "'insured_subject_constraints' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_core
     *
     * @return bool
     */
    public function getIsCore()
    {
        return $this->container['is_core'];
    }

    /**
     * Sets is_core
     *
     * @param bool $is_core is_core
     *
     * @return $this
     */
    public function setIsCore($is_core)
    {
        $this->container['is_core'] = $is_core;

        return $this;
    }

    /**
     * Gets policy_period
     *
     * @return AnyOfDetailedPlanModelPolicyPeriod
     */
    public function getPolicyPeriod()
    {
        return $this->container['policy_period'];
    }

    /**
     * Sets policy_period
     *
     * @param AnyOfDetailedPlanModelPolicyPeriod $policy_period policy_period
     *
     * @return $this
     */
    public function setPolicyPeriod($policy_period)
    {
        $this->container['policy_period'] = $policy_period;

        return $this;
    }

    /**
     * Gets payment_modes
     *
     * @return \Swagger\Client\Model\PlanPaymentModeModel[]
     */
    public function getPaymentModes()
    {
        return $this->container['payment_modes'];
    }

    /**
     * Sets payment_modes
     *
     * @param \Swagger\Client\Model\PlanPaymentModeModel[] $payment_modes payment_modes
     *
     * @return $this
     */
    public function setPaymentModes($payment_modes)
    {
        $this->container['payment_modes'] = $payment_modes;

        return $this;
    }

    /**
     * Gets currencies
     *
     * @return string[]
     */
    public function getCurrencies()
    {
        return $this->container['currencies'];
    }

    /**
     * Sets currencies
     *
     * @param string[] $currencies currencies
     *
     * @return $this
     */
    public function setCurrencies($currencies)
    {
        $this->container['currencies'] = $currencies;

        return $this;
    }

    /**
     * Gets benefits
     *
     * @return \Swagger\Client\Model\AnyOfDetailedPlanModelBenefitsItems[]
     */
    public function getBenefits()
    {
        return $this->container['benefits'];
    }

    /**
     * Sets benefits
     *
     * @param \Swagger\Client\Model\AnyOfDetailedPlanModelBenefitsItems[] $benefits benefits
     *
     * @return $this
     */
    public function setBenefits($benefits)
    {
        $this->container['benefits'] = $benefits;

        return $this;
    }

    /**
     * Gets insured_subject_constraints
     *
     * @return \Swagger\Client\Model\PartialConstraintModel[]
     */
    public function getInsuredSubjectConstraints()
    {
        return $this->container['insured_subject_constraints'];
    }

    /**
     * Sets insured_subject_constraints
     *
     * @param \Swagger\Client\Model\PartialConstraintModel[] $insured_subject_constraints insured_subject_constraints
     *
     * @return $this
     */
    public function setInsuredSubjectConstraints($insured_subject_constraints)
    {
        $this->container['insured_subject_constraints'] = $insured_subject_constraints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
